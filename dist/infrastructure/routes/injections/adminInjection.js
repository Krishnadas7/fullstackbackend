"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.adminusecase = exports.adminAdapter = void 0;
const adminAdapter_1 = require("../../../controller/adminAdapter");
const adminuseCase_1 = require("../../../usecase/usecase/adminuseCase");
const adminModel_1 = __importDefault(require("../../database/model/adminModel"));
const userModel_1 = __importDefault(require("../../database/model/userModel"));
const adminRepository_1 = require("../../database/repository/adminRepository");
const userRepository_1 = require("../../database/repository/userRepository");
const bcrypt_1 = __importDefault(require("../../services/bcrypt"));
const jwt_1 = __importDefault(require("../../services/jwt"));
const s3services_1 = require("../../services/s3services");
const awsS3_1 = require("../../config/awsS3");
const eventRepository_1 = require("../../database/repository/eventRepository");
const eventModel_1 = __importDefault(require("../../database/model/eventModel"));
const reportRepository_1 = require("../../database/repository/reportRepository");
const reportModel_1 = __importDefault(require("../../database/model/reportModel"));
const eventRepository = new eventRepository_1.EventRepository(eventModel_1.default);
const adminRepository = new adminRepository_1.AdminRepository(adminModel_1.default);
const userRepository = new userRepository_1.UserRepository(userModel_1.default);
const reportRepository = new reportRepository_1.ReportRepository(reportModel_1.default);
const bcrypt = new bcrypt_1.default();
const jwt = new jwt_1.default();
const s3service = new s3services_1.S3services();
const adminusecase = new adminuseCase_1.AdminUseCase(adminRepository, userRepository, eventRepository, bcrypt, jwt, s3service, awsS3_1.s3, reportRepository);
exports.adminusecase = adminusecase;
const adminAdapter = new adminAdapter_1.AdminAdapter(adminusecase);
exports.adminAdapter = adminAdapter;
